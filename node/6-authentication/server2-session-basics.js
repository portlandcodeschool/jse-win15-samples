var http = require("http");
//var st = require('st'); //not needed
var Router = require("routes-router");
var router = Router();

// Return html as a response to a client:
var sendHtml = require("send-data/html"); //may also need send-data/json

// Pre-compile all the templates in directory server-templates/templates
var templates = require('./server-templates/compile-templates');

// ---- New components ----

// Session factory:
var Session = require("generic-session"); // session factory

// Create a volatile memory store instance shared by all sessions.
var store = Session.MemoryStore();
// Each session instance generated by Session(...) will
// use a "partion" within store specific to one client.


// ---- Debugging/Data-watching ----
var _ = require('underscore');
function showSession(session) {
	// display subset of session properties:
	console.log(_.pick(session,['options','store','expire','token','id']));
										// excludes: 'cookies','request','response'
	//actual session data must be read through getter method:
	session.getAll(function(err,props) {
		console.log(props); // data from store belonging to session
	});
}

// ---- Routes ----

// Default route to display instructions:
// (could also be stored as static asset and managed via st())
router.addRoute("/", function(req,res,opts) {
	// respond to client with some html, customizing the "simple" template:
	sendHtml(req,res,templates.simple({
		message:'URL for getting prop:<br>'+
						' localhost:3000/prop <p/>'+
						'URL for setting prop=val:<br>'+
						' localhost:3000/prop/val'
		}));
})

// Route for setting session property:
router.addRoute("/:prop/:val", function(req,res,opts) {
	// generate session specific to the client making req:
	var session = Session(req,res,store),
	// extract prop and val from url:
			prop = opts.params.prop,
			val =  opts.params.val;
	// save prop and val in the store, in a partition specific to session...
	session.set(prop, val, function(err) {
		// then run this callback...
		if (!err) {
			showSession(session); //for demo only: show all session data
			// then respond to client with some html from a template:
			sendHtml(req,res, templates.simple({message:'Property '+prop+' is now '+val}) );
		}
	});
});

// Route for getting session property:
router.addRoute("/:prop", function(req,res,opts) {
	var session = Session(req,res,store),
			prop = opts.params.prop;
	// retrieve from the store the val of prop for this session...
	session.get(prop, function(err,val) {
		// then run this callback...
		if (!err) {
			showSession(session);
			sendHtml(req,res, templates.simple({message:'Property '+prop+' is '+val}) );
		}
	});
});


var server = http.createServer(router);
server.listen(3000);
console.log("example auth server listening on port 3000");
